<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\tools\apache-jmeter\apache-jmeter-5.4.3\bin\TESTs PLAN  PROJECT BOBA</stringProp>
        </ResultCollector>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">redshift_conn</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:redshift://dalab-project-stage.cettexdsxw3v.eu-central-1.redshift.amazonaws.com:5439/boba_db</stringProp>
          <stringProp name="driver">com.amazon.redshift.jdbc42.Driver</stringProp>
          <stringProp name="username">boba_dqe_user</stringProp>
          <stringProp name="password">EnaSBg)8U&amp;[mx-b</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://ec2-18-196-104-185.eu-central-1.compute.amazonaws.com:5432/postgres</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">test^team23%</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">test_team</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="lnd_layer.fct_outlet_distribution  table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT ol_id, merch_id, date_id,
       product_id, present_qty, price,
       present_amount, weight,
       begin_min_id, end_min_id,
       mins_spent, part_id
FROM lnd_layer.fct_outlet_distribution
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">exist1</stringProp>
          <stringProp name="variableNames">exist1</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="lnd_layer.fct_outlet_distribution  table exists" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="lnd_layer.fct_outlet_order_d  table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT olcard_id, date_id, merch_id,
       ol_id, order_no, product_id, product_qty,
       weight_kg, price, vat,
       amount, w_id, begin_min_id,
       end_min_id, mins_spent, part_id
FROM lnd_layer.fct_outlet_order_d
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">exist2</stringProp>
          <stringProp name="variableNames">exist2</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="lnd_layer.fct_outlet_order_d  table exists" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="checking metadata in the table lnd_layer.fct_outlet_distribution" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">WITH golden_metadata AS
        (
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;ol_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;merch_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;date_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;product_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;present_qty&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;price&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;present_amount&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;weight&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;begin_min_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;end_min_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;mins_spent&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;part_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;is_processed&apos; AS column_name, &apos;boolean&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;false&apos; AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_distribution&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

       ), utc AS
        (
        SELECT table_name, 
               column_name, 
               data_type, 
               character_maximum_length, 
               is_nullable, 
               column_default 
        FROM information_schema.columns 
        WHERE table_name=&apos;fct_outlet_distribution&apos;
        )
        SELECT * FROM golden_metadata 
        EXCEPT
        SELECT * FROM utc 
        UNION ALL
        SELECT * FROM utc 
        EXCEPT
        SELECT * FROM golden_metadata; </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">meta1</stringProp>
          <stringProp name="variableNames">meta1</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existing  metadata in the table lnd_layer.fct_outlet_distribution" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">meta1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="checking metadata in the table lnd_layer.fct_outlet_order_d" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">WITH golden_metadata AS
        (
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;olcard_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;date_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;merch_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;ol_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;order_no&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;product_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;product_qty&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;weight_kg&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
        
           UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;price&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;vat&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;amount&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;w_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;begin_min_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;end_min_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;mins_spent&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;part_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;is_processed&apos; AS column_name, &apos;boolean&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;false&apos; AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

        UNION ALL 
        SELECT &apos;fct_outlet_order_d&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

       ), utc AS
        (
        SELECT table_name, 
               column_name, 
               data_type, 
               character_maximum_length, 
               is_nullable, 
               column_default 
        FROM information_schema.columns 
        WHERE table_name=&apos;fct_outlet_order_d&apos;
        )
        SELECT * FROM golden_metadata 
        EXCEPT
        SELECT * FROM utc 
        UNION ALL
        SELECT * FROM utc 
        EXCEPT
        SELECT * FROM golden_metadata;      </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">meta2</stringProp>
          <stringProp name="variableNames">meta2</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existing  metadata in the table lnd_layer.fct_outlet_order_d" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">meta2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare count of rows in tableslnd_layer.fct_outlet_distribution and ext_layer.factoutletdistribution" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT source.n as rows_ext_factoutletdistribution, 
       target.n as rows_lnd_fct_outlet_distribution, 
       (source.n-target.n) as differ
FROM
(SELECT count(*) as n FROM ext_layer.factoutletdistribution) source,
(SELECT count(*) as n FROM lnd_layer.fct_outlet_distribution) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">count1</stringProp>
          <stringProp name="variableNames">count1</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal count of rows in tableslnd_layer.fct_outlet_distribution and ext_layer.factoutletdistribution" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96526715">differ=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare count of rows in tables lnd_layer.fct_outlet_order_d and ext_layer.factoutletorderd" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT source.n as rows_ext_factoutletorderd, 
       target.n as rows_lnd_fct_outlet_order_d, 
       (source.n-target.n) as differ
FROM
(SELECT count(*) as n FROM ext_layer.factoutletorderd) source,
(SELECT count(*) as n FROM lnd_layer.fct_outlet_order_d) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">count2</stringProp>
          <stringProp name="variableNames">count2</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal count of rows in tables  lnd_layer.fct_outlet_order_d and ext_layer.factoutletorderd" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96526715">differ=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="row by row check lnd_layer.fct_outlet_distribution and ext_layer.factoutletdistribution" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT ol_id,
       merch_id,
       date_id,
       product_id,
       presentqty,
       price,
       presentamount,
       weight,
       beginminuteid,
       endminuteid,
       minutesspent,
       part_id
FROM ext_layer.factoutletdistribution

EXCEPT  

SELECT ol_id,
       merch_id,
       date_id,
       product_id,
       present_qty,
       price,
       present_amount,
       weight,
       begin_min_id,
       end_min_id,
       mins_spent,
       part_id
FROM lnd_layer.fct_outlet_distribution
UNION ALL
SELECT ol_id,
       merch_id,
       date_id,
       product_id,
       present_qty,
       price,
       present_amount,
       weight,
       begin_min_id,
       end_min_id,
       mins_spent,
       part_id
FROM lnd_layer.fct_outlet_distribution

EXCEPT

SELECT ol_id,
       merch_id,
       date_id,
       product_id,
       presentqty,
       price,
       presentamount,
       weight,
       beginminuteid,
       endminuteid,
       minutesspent,
       part_id
FROM ext_layer.factoutletdistribution;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">row1</stringProp>
          <stringProp name="variableNames">row1</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal rows in the lnd_layer.fct_outlet_distribution and ext_layer.factoutletdistribution" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="row by row check lnd_layer.fct_outlet_order_d and ext_layer.factoutletorderd" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT olcard_id,
       date_id,
       merch_id,
       ol_id,
       orderno,
       product_id,
       product_qty,
       weightkg,
       price,
       vat,
       amount,
       w_id,
       beginminuteid,
       endminuteid,
       minutesspent,
       part_id
FROM ext_layer.factoutletorderd

EXCEPT 

SELECT olcard_id,
       date_id,
       merch_id,
       ol_id,
       order_no,
       product_id,
       product_qty,
       weight_kg,
       price,
       vat,
       amount,
       w_id,
       begin_min_id,
       end_min_id,
       mins_spent,
       part_id
FROM lnd_layer.fct_outlet_order_d
UNION ALL
SELECT olcard_id,
       date_id,
       merch_id,
       ol_id,
       order_no,
       product_id,
       product_qty,
       weight_kg,
       price,
       vat,
       amount,
       w_id,
       begin_min_id,
       end_min_id,
       mins_spent,
       part_id
FROM lnd_layer.fct_outlet_order_d

EXCEPT

SELECT olcard_id,
       date_id,
       merch_id,
       ol_id,
       orderno,
       product_id,
       product_qty,
       weightkg,
       price,
       vat,
       amount,
       w_id,
       beginminuteid,
       endminuteid,
       minutesspent,
       part_id
FROM ext_layer.factoutletorderd;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">row2</stringProp>
          <stringProp name="variableNames">row2</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal rows in the lnd_layer.fct_outlet_order_d and ext_layer.factoutletorderd" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare sum of length of rows in tables lnd_layer.fct_outlet_distribution and ext_layer.factoutletdistribution" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT
       (source.ol_id-target.ol_id)+
       (source.merch_id-target.merch_id)+
       (source.date_id-target.date_id)+
       (source.product_id-target.product_id)+
       (source.presentqty-target.presentqty)+
       (source.price-target.price)+
       (source.presentamount-target.presentamount)+
       (source.weight-target.weight)+
       (source.beginminuteid-target.beginminuteid)+
       (source.endminuteid-target.endminuteid)+
       (source.minutesspent-target.minutesspent)+
       (source.part_id-target.part_id)
FROM
(SELECT sum(length(trim(ol_id))) as ol_id,
        sum(length(trim(merch_id))) as merch_id,
        sum(length(trim(date_id))) as date_id,
        sum(length(trim(product_id))) as product_id,
        sum(length(trim(presentqty))) as presentqty,
        sum(length(trim(price))) as price,
        sum(length(trim(presentamount))) as presentamount,
        sum(length(trim(weight))) as weight,
        sum(length(trim(beginminuteid))) as beginminuteid,
        sum(length(trim(endminuteid))) as endminuteid,
        sum(length(trim(minutesspent))) as minutesspent,
        sum(length(trim(part_id))) as part_id
 FROM ext_layer.factoutletdistribution) source,

(SELECT sum(length(ol_id)) as ol_id,
        sum(length(merch_id)) as merch_id,
        sum(length(date_id)) as date_id,
        sum(length(product_id)) as product_id,
        sum(length(present_qty)) as presentqty,
        sum(length(price)) as price,
        sum(length(present_amount)) as presentamount,
        sum(length(weight)) as weight,
        sum(length(begin_min_id)) as beginminuteid,
        sum(length(end_min_id)) as endminuteid,
        sum(length(mins_spent)) as minutesspent,
        sum(length(part_id)) as part_id
 FROM lnd_layer.fct_outlet_distribution) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">sum_length1</stringProp>
          <stringProp name="variableNames">sum_length1</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal sum of length of rows in tables lnd_layer.fct_outlet_distribution and ext_layer.factoutletdistribution" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">sum_length1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare sum of length of rows in tables lnd_layer.fct_outlet_order_d and ext_layer.factoutletorderd" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT
       (source.olcard_id-target.olcard_id)+
       (source.date_id-target.date_id)+
       (source.merch_id-target.merch_id)+
       (source.ol_id-target.ol_id)+
       (source.order_no-target.order_no)+
       (source.product_id-target.product_id)+
       (source.product_qty-target.product_qty)+
       (source.weight_kg-target.weight_kg)+
       (source.price-target.price)+
       (source.vat-target.vat)+
       (source.amount-target.amount)+
       (source.w_id-target.w_id)+
       (source.begin_min_id-target.begin_min_id)+
       (source.end_min_id-target.end_min_id)+
       (source.mins_spent-target.mins_spent)+
       (source.part_id-target.part_id)
FROM
(SELECT sum(length(olcard_id)) as olcard_id,
        sum(length(date_id)) as date_id,
        sum(length(merch_id)) as merch_id,
        sum(length(ol_id)) as ol_id,
        sum(length(orderno)) as order_no,
        sum(length(product_id)) as product_id,
        sum(length(product_qty)) as product_qty,
        sum(length(weightkg)) as weight_kg,
        sum(length(price)) as price,
        sum(length(vat)) as vat,
        sum(length(amount)) as amount,
        sum(length(w_id)) as w_id,
        sum(length(beginminuteid)) as begin_min_id,
        sum(length(endminuteid)) as end_min_id,
        sum(length(minutesspent)) as mins_spent,
        sum(length(part_id)) as part_id
 FROM ext_layer.factoutletorderd) source,

(SELECT sum(length(olcard_id)) as olcard_id,
        sum(length(date_id)) as date_id,
        sum(length(merch_id)) as merch_id,
        sum(length(ol_id)) as ol_id,
        sum(length(order_no)) as order_no,
        sum(length(product_id)) as product_id,
        sum(length(product_qty)) as product_qty,
        sum(length(weight_kg)) as weight_kg,
        sum(length(price)) as price,
        sum(length(vat)) as vat,
        sum(length(amount)) as amount,
        sum(length(w_id)) as w_id,
        sum(length(begin_min_id)) as begin_min_id,
        sum(length(end_min_id)) as end_min_id,
        sum(length(mins_spent)) as mins_spent,
        sum(length(part_id)) as part_id
 FROM lnd_layer.fct_outlet_order_d) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">sum_length2</stringProp>
          <stringProp name="variableNames">sum_length2</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal sum of length of rows in tables lnd_layer.fct_outlet_order_d and ext_layer.factoutletorderd" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">sum_length2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="layer_3nf.ce_products table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT product_surr_id,
       product_src_id,
       product_name,
       product_name_en,
       product_code,
       product_type_surr_id,
       product_group_surr_id,
       product_category_surr_id,
       src_table,
       insert_dt,
       update_dt
FROM layer_3nf.ce_products
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist1</stringProp>
          <stringProp name="resultVariable">exist1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="layer_3nf.ce_products table exists" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="layer_3nf.ce_outlets table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT outlet_surr_id,
       outlet_src_id,
       outlet_name,
       outlet_name_en,
       src_table,
       insert_dt,
       update_dt
FROM layer_3nf.ce_outlets
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist2</stringProp>
          <stringProp name="resultVariable">exist2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="layer_3nf.ce_ce_outlet table exists" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="checking metadata in the table layer_3nf.ce_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH golden_metadata AS
        (
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;nextval(&apos;&apos;layer_3nf.ce_products_seq&apos;&apos;::regclass)&apos; AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_src_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_name&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_name_en&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_code&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_type_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_group_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;product_category_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
        
        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;src_table&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

        UNION ALL 
        SELECT &apos;ce_products&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

       ), utc AS
        (
        SELECT table_name, 
               column_name, 
               data_type, 
               character_maximum_length, 
               is_nullable, 
               column_default 
        FROM information_schema.columns 
        WHERE table_name=&apos;ce_products&apos;
        )
        SELECT * FROM golden_metadata 
        EXCEPT
        SELECT * FROM utc 
        UNION ALL
        SELECT * FROM utc 
        EXCEPT
        SELECT * FROM golden_metadata; </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">meta1</stringProp>
          <stringProp name="resultVariable">meta1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="expected metadata in the table layer_3nf.ce_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">meta1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="checking metadata in the table layer_3nf.ce_outlets" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH golden_metadata AS
        (
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;outlet_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;nextval(&apos;&apos;layer_3nf.ce_outlets_seq&apos;&apos;::regclass)&apos; AS column_default

        UNION ALL 
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;outlet_src_id&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;outlet_name&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;outlet_name_en&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
        
        UNION ALL 
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;src_table&apos; AS column_name, &apos;character varying&apos; AS data_type, 
        256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default

        UNION ALL 
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

        UNION ALL 
        SELECT &apos;ce_outlets&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type, 
        NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default

       ), utc AS
        (
        SELECT table_name, 
               column_name, 
               data_type, 
               character_maximum_length, 
               is_nullable, 
               column_default 
        FROM information_schema.columns 
        WHERE table_name=&apos;ce_outlets&apos;
        )
        SELECT * FROM golden_metadata 
        EXCEPT
        SELECT * FROM utc 
        UNION ALL
        SELECT * FROM utc 
        EXCEPT
        SELECT * FROM golden_metadata; </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">meta2</stringProp>
          <stringProp name="resultVariable">meta2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="expected metadata in the table layer_3nf.ce_outlets" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">meta2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check full duplicates in the table layer_3nf.ce_outlet" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT outlet_surr_id,
       outlet_src_id ,
	   outlet_name ,
	   outlet_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
FROM layer_3nf.ce_outlets
GROUP BY outlet_surr_id,
         outlet_src_id,
	     outlet_name,
	     outlet_name_en,
	     src_table,
	     insert_dt,
	     update_dt
HAVING count(*)&gt;1;    </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dupl4</stringProp>
          <stringProp name="resultVariable">dupl4</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="no full duplicates in the table layer_3nf.ce_outlet" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dupl4_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check full duplicates in the table layer_3nf.ce_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT product_surr_id,
       product_src_id ,
	   product_name ,
	   product_name_en,
	   product_code,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
FROM layer_3nf.ce_products
GROUP BY product_surr_id,
         product_src_id ,
	     product_name ,
	     product_name_en,
	     product_code,
	     src_table,
	     insert_dt,
	     update_dt
HAVING count(*)&gt;1;	     </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dupl3</stringProp>
          <stringProp name="resultVariable">dupl3</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="no full duplicates in the table layer_3nf.ce_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dupl3_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check duplicates in the table layer_3nf.ce_outlet" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT outlet_src_id ,
	   outlet_name ,
	   outlet_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
FROM layer_3nf.ce_outlets
GROUP BY outlet_src_id ,
	     outlet_name ,
	     outlet_name_en,
	     src_table,
	     insert_dt,
	     update_dt
HAVING count(*)&gt;1;  </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dupl2</stringProp>
          <stringProp name="resultVariable">dupl2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check duplicates in the table layer_3nf.ce_outlet" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dupl2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check duplicates in the table layer_3nf.ce_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT product_src_id ,
	   product_name ,
	   product_name_en,
	   product_code,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
FROM layer_3nf.ce_products
GROUP BY product_src_id ,
	     product_name ,
	     product_name_en,
	     product_code,
	     src_table,
	     insert_dt,
	     update_dt
HAVING count(*)&gt;1;	     </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dupl1</stringProp>
          <stringProp name="resultVariable">dupl1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="no duplicates in the table layer_3nf.ce_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dupl1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare sum of length of rows in tables layer_3nf.ce_outlets and lnd_layer.dim_outlets" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT
       ((source.ol_id-target.outlet_src_id)+
       (source.ol_name-target.outlet_name)+
       (source.ol_name_en-target.outlet_name_en)) as s
FROM
      (SELECT sum(length(ol_id)) as ol_id,
              sum(length(ol_name)) as ol_name,
              sum(length(ol_name_en)) as ol_name_en
       FROM 
           (SELECT DISTINCT ol_id,
                   ol_name,
                   ol_name_en 
            FROM lnd_layer.dim_outlets
            UNION ALL 
            SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;) a)  source,

      (SELECT sum(length(outlet_src_id)) as outlet_src_id,
              sum(length(outlet_name)) as outlet_name,
              sum(length(outlet_name_en)) as outlet_name_en
       FROM layer_3nf.ce_outlets) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">length2</stringProp>
          <stringProp name="resultVariable">length2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal length of rows layer_3nf.ce_outlets and lnd_layer.dim_outlets" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">length2_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare sum of length of rows in tables layer_3nf.ce_products and lnd_layer.dim_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT
       ((source.product_id-target.product_src_id)+
       (source.product_name-target.product_name)+
       (source.product_name_en-target.product_name_en)+
       (source.product_code-target.product_code)) as s
FROM
     (SELECT sum(length(product_id)) as product_id,
             sum(length(product_name)) as product_name,
             sum(length(product_name_en)) as product_name_en,
             sum(length(product_code)) as product_code
      FROM (SELECT DISTINCT product_id,
                   product_name,
                   product_name_en,
                   product_code
            FROM lnd_layer.dim_products
            UNION ALL 
            SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;) a) SOURCE,
     (SELECT sum(length(product_src_id)) as product_src_id,
             sum(length(product_name)) as product_name,
             sum(length(product_name_en)) as product_name_en,
             sum(length(product_code)) as product_code 
      FROM layer_3nf.ce_products) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">length1</stringProp>
          <stringProp name="resultVariable">length1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal length of rows  layer_3nf.ce_products and lnd_layer.dim_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">length1_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare count of rows layer_3nf.ce_outlets and lnd_layer.dim_outlets" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT source.n as rows_dim_outlets, 
       target.n as rows_ce_outlets, 
       (source.n+1-target.n) as differ
FROM
(SELECT count(*) as n FROM lnd_layer.dim_outlets) source,
(SELECT count(*) as n FROM layer_3nf.ce_outlets) target;	</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count2</stringProp>
          <stringProp name="resultVariable">count2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal count of rows layer_3nf.ce_outlets and lnd_layer.dim_outlets" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96526715">differ=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="compare count of rows layer_3nf.ce_products and lnd_layer.dim_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT source.n as rows_dim_products, 
       target.n as rows_ce_products, 
       (source.n+1-target.n) as differ
FROM
(SELECT count(*) as n FROM lnd_layer.dim_products) source,
(SELECT count(*) as n FROM layer_3nf.ce_products) target;	</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count1</stringProp>
          <stringProp name="resultVariable">count1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal count of rows layer_3nf.ce_products and lnd_layer.dim_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-96526715">differ=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="row by row check lnd_layer.dim_outlets and  layer_3nf.ce_outlets" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">((SELECT          outlet_src_id ,
				outlet_name ,
				outlet_name_en
FROM layer_3nf.ce_outlets)
EXCEPT  
(SELECT DISTINCT ol_id ,
				ol_name ,
				ol_name_en
FROM lnd_layer.dim_outlets 
UNION
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;))

UNION ALL

((SELECT DISTINCT ol_id ,
				ol_name ,
				ol_name_en
FROM lnd_layer.dim_outlets 
UNION
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;)
EXCEPT 
(SELECT          outlet_src_id ,
				outlet_name ,
				outlet_name_en
FROM layer_3nf.ce_outlets));</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row2</stringProp>
          <stringProp name="resultVariable">row2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal rows lnd_layer.dim_outlets and  layer_3nf.ce_outlets" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row2_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="row by row check layer_3nf.ce_products and lnd_layer.dim_products " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">((SELECT          product_src_id ,
				product_name ,
				product_name_en,
				product_code
FROM layer_3nf.ce_products)
EXCEPT  
(SELECT DISTINCT product_id ,
				product_name ,
				product_name_en,
				product_code
FROM lnd_layer.dim_products 
UNION
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;))

UNION ALL

((SELECT DISTINCT product_id ,
				product_name ,
				product_name_en,
				product_code
FROM lnd_layer.dim_products 
UNION
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;) 

EXCEPT 
SELECT          product_src_id ,
				product_name ,
				product_name_en,
				product_code
FROM layer_3nf.ce_products) ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row1</stringProp>
          <stringProp name="resultVariable">row1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="equal  rows  layer_3nf.ce_products and lnd_layer.dim_products " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row1_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
