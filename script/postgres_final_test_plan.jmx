<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="postgres_test_plan_final" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="project_postgreSQL" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="POSTGRE" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://ec2-18-196-104-185.eu-central-1.compute.amazonaws.com:5432/postgres</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">test^team23%</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">test_team</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check exsisting LND diim_time" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	time_id
		,hour_id
		,hour_name
		,time_name
FROM lnd_layer.dim_time dt 
LIMIT 1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">column</stringProp>
          <stringProp name="resultVariable">column</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">column_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check exsisting LND dim_invoices" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT invoice_id  , invoice_no
 , merch_id , ol_id
 , date_id , status
 , status_name , cust_id
 , doc_type, doc_type_name
FROM LND_LAYER.dim_invoices
LIMIT 1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">column</stringProp>
          <stringProp name="variableNames">column</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">column_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check exsisting LND dim_warehouses" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	w_id  	 ,w_longname
	,cust_id  ,cust_name
	,distr_id	,distr_name
	,city_id	,city_name
	,district_id	,district_name
	,region_id	,region_name
	,country_id	,country_name
	,w_type_id	,w_type_longname
FROM lnd_layer.dim_warehouses
LIMIT 1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">column</stringProp>
          <stringProp name="resultVariable">column</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">column_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check exsisting LND dim_warehouse_relations" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	w_id
		,order_type
		,merch_id
		,status
		,dlm
FROM lnd_layer.dim_warehouse_relations 
LIMIT 1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">column</stringProp>
          <stringProp name="resultVariable">column</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">column_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check COUNT rows BETWEEN EXT  LND dim_invoices_in" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT lnd_count.n-ext_count.n AS dif 
from   
(SELECT count(*) AS n FROM lnd_layer.dim_invoices_in) AS lnd_count ,
(SELECT count(*) AS n FROM ext_layer.diminvoicesin d) AS ext_count;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows_count</stringProp>
          <stringProp name="resultVariable">rows_count</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_count_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check COUNT rows BETWEEN EXT  LND dimwarehouserelations" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT lnd_count.n-ext_count.n AS dif 
from 
(SELECT count(*) AS n FROM lnd_layer.dim_warehouse_relations )  lnd_count ,
(SELECT count(*) AS n FROM ext_layer.dimwarehouserelations ) ext_count</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows_count</stringProp>
          <stringProp name="resultVariable">rows_count</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_count_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check COUNT rows BETWEEN EXT  LND dim_time" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT lnd_count.n-ext_countxt.n AS dif 
from
(SELECT count(*) AS n FROM lnd_layer.dim_time) lnd_count,
(SELECT count(*) AS n FROM ext_layer.dimtime )  ext_countxt;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows_count</stringProp>
          <stringProp name="resultVariable">rows_count</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_count_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check COUNT rows BETWEEN EXT  LND dimwarehouses" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT lnd_count.n-ext_count.n AS dif 
from
(SELECT count(*) AS n FROM lnd_layer.dim_warehouses)  lnd_count ,
(SELECT count(*) AS n FROM ext_layer.dimwarehouses )  ext_count</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows_count</stringProp>
          <stringProp name="resultVariable">rows_count</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_count_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check ROWS dif EXT_LND dim_warehouse_relations" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	w_id
		,order_type
		,merch_id
		,status
		,dlm
FROM lnd_layer.dim_warehouse_relations 
EXCEPT 
SELECT 	w_id
		,ordertype
		,merch_id
		,status
		,dlm
FROM ext_layer.dimwarehouserelations d 
	UNION ALL 
	SELECT 	w_id
		,ordertype
		,merch_id
		,status
		,dlm
	FROM ext_layer.dimwarehouserelations d
	EXCEPT
	SELECT 	w_id
			,order_type
			,merch_id
			,status
			,dlm
	FROM lnd_layer.dim_warehouse_relations</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row</stringProp>
          <stringProp name="resultVariable">row</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check ROWS dif EXT_LND dim_warehouses" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT
	w_id
	,w_longname
	,cust_id
	,cust_name
	,distr_id
	,distr_name
	,city_id
	,city_name
	,district_id
	,district_name
	,region_id
	,region_name
	,country_id
	,country_name
	,w_type_id
	,w_type_longname
FROM lnd_layer.dim_warehouses
EXCEPT
SELECT 
	w_id
	,w_longname
	,cust_id
	,cust_name
	,distr_id
	,distr_name
	,city_id
	,city_name
	,district_id
	,district_name
	,region_id
	,region_name
	,country_id
	,country_name
	,wtype_id
	,wtype_longname
FROM ext_layer.dimwarehouses d 
	UNION ALL 
	SELECT 
	w_id
	,w_longname
	,cust_id
	,cust_name
	,distr_id
	,distr_name
	,city_id
	,city_name
	,district_id
	,district_name
	,region_id
	,region_name
	,country_id
	,country_name
	,wtype_id
	,wtype_longname
FROM ext_layer.dimwarehouses d 
EXCEPT 
SELECT
	w_id
	,w_longname
	,cust_id
	,cust_name
	,distr_id
	,distr_name
	,city_id
	,city_name
	,district_id
	,district_name
	,region_id
	,region_name
	,country_id
	,country_name
	,w_type_id
	,w_type_longname
FROM lnd_layer.dim_warehouses
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row</stringProp>
          <stringProp name="resultVariable">row</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check ROWS dif EXT_LND dim_time" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	time_id
		,hour_id
		,hour_name
		,time_name
FROM lnd_layer.dim_time dt 		 
EXCEPT 
SELECT 	timeid
		,hourid
		,hourname
		,timename
FROM ext_layer.dimtime d 
	UNION ALL 
	SELECT 	timeid
		,hourid
		,hourname
		,timename
	FROM ext_layer.dimtime d 
	EXCEPT 
	SELECT 	time_id
		,hour_id
		,hour_name
		,time_name
	FROM lnd_layer.dim_time dt ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row</stringProp>
          <stringProp name="resultVariable">row</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check ROWS dif EXT_LND dim_invoices_in" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	invoice_id
		,invoice_no
		,date_id
		,cust_id
		,doc_type
		,doc_type_name
FROM lnd_layer.dim_invoices_in dii 
EXCEPT
SELECT 	invoice_id
		,invoice_no
		,date_id
		,cust_id
		,doc_type
		,doctypename
FROM ext_layer.diminvoicesin d 
	UNION ALL
	SELECT 	invoice_id
			,invoice_no
			,date_id
			,cust_id
			,doc_type
			,doctypename
	FROM ext_layer.diminvoicesin d 
	EXCEPT 
	SELECT 	invoice_id
			,invoice_no
			,date_id
			,cust_id
			,doc_type
			,doc_type_name
	FROM lnd_layer.dim_invoices_in dii </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check LENGTH rows VETWEEN EXT \ LND dim_warehouse_relations" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	sum(trim(length(d.w_id))) AS w_id ,
		sum(trim(length(d.ordertype))) AS ordertype ,
		sum(trim(length(d.merch_id))) AS merch ,
		sum(trim(length(d.status))) AS status ,
		sum(trim(length(d.dlm))) AS dlm
FROM ext_layer.dimwarehouserelations d 
	except
SELECT sum((length(d2.w_id))) AS w_id ,
		sum((length(d2.order_type))) AS ordertype ,
		sum((length(d2.merch_id))) AS merch ,
		sum((length(d2.status))) AS status ,
		sum((length(d2.dlm))) AS dlm
FROM lnd_layer.dim_warehouse_relations d2</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check LENGTH rows VETWEEN EXT \ LND dimwarehouses" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 	sum(length(trim(d.w_id))) w_id, 
		sum(length(trim(d.w_longname))) w_longname, 
		sum(length(trim(d.cust_id))) cust_id, 
		sum(length(trim(d.cust_name))) cust_name, 
		sum(length(trim(d.distr_id))) distr_id, 
		sum(length(trim(d.distr_name))) distr_name, 
		sum(length(trim(d.city_id))) city_id, 
		sum(length(trim(d.city_name))) city_name, 
		sum(length(trim(d.district_id))) district_id, 
		sum(length(trim(d.district_name))) district_name, 
		sum(length(trim(d.region_id))) region_id, 
		sum(length(trim(d.region_name))) region_name, 
		sum(length(trim(d.country_id))) country_id, 
		sum(length(trim(d.country_name))) country_name, 
		sum(length(trim(d.wtype_id))) wtype_id, 
		sum(length(trim(d.wtype_longname))) wtype_longname
FROM ext_layer.dimwarehouses d
except 
SELECT 
		sum((length(d2.w_id))) w_id,
		sum((length(d2.w_longname))) w_longname,
		sum((length(d2.cust_id))) cust_id,
		sum((length(d2.cust_name))) cust_name,
		sum((length(d2.distr_id))) distr_id,
		sum((length(d2.distr_name))) distr_name,
		sum((length(d2.city_id))) city_id,
		sum((length(d2.city_name))) city_name,
		sum((length(d2.district_id))) district_id,
		sum((length(d2.district_name))) district_name,
		sum((length(d2.region_id))) region_id ,
		sum((length(d2.region_name))) region_name,
		sum((length(d2.country_id))) country_id,
		sum((length(d2.country_name))) country_name,
		sum((length(d2.w_type_id))) w_type_id,
		sum((length(d2.w_type_longname))) w_type_longname
FROM lnd_layer.dim_warehouses d2;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check LENGTH rows VETWEEN EXT \ LND dim_time" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT sum(length(trim(d.timeid))) timeid ,
		sum(length(trim(d.hourid))) hourid ,
		sum(length(trim(d.hourname))) hourname ,
		sum(length(trim(d.timename))) timename 
FROM ext_layer.dimtime d
except
SELECT 	sum(length((d.time_id))) timeid ,
		sum(length((d.hour_id))) hourid ,
		sum(length((d.hour_name))) hourname ,
		sum(length((d.time_name))) timename 
FROM lnd_layer.dim_time d</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check LENGTH rows VETWEEN EXT \ LND dim_invoices_in" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">
SELECT 
	 sum(length(trim(d.invoice_id))) invoice_id ,
	 sum(length(trim(d.invoice_no))) invoice_no ,
	 sum(length(trim(d.date_id))) date_id ,
	 sum(length(trim(d.cust_id))) cust_id ,
	 sum(length(trim(d.doc_type))) doc_type ,
	 sum(length(trim(d.doctypename))) doctypename 
FROM ext_layer.diminvoicesin d 
except
SELECT 
	 sum(length((d.invoice_id))) invoice_id ,
	 sum(length((d.invoice_no))) invoice_no ,
	 sum(length((d.date_id))) date_id ,
	 sum(length((d.cust_id))) cust_id ,
	 sum(length((d.doc_type))) doc_type ,
	 sum(length((d.doc_type_name))) doctypename 
FROM lnd_layer.dim_invoices_in d </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check METADATA LND DIM_TIME" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH 
golden_metadata AS
(
	SELECT &apos;dim_time&apos; AS table_name, &apos;time_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_time&apos; AS table_name, &apos;hour_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_time&apos; AS table_name, &apos;hour_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_time&apos; AS table_name, &apos;time_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_time&apos; AS table_name, &apos;is_processed&apos; AS column_name, &apos;boolean&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;false&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_time&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_time&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
), 
utc AS
	(
	SELECT 	table_name,
			column_name,
			data_type,
			character_maximum_length,
			is_nullable,
			column_default
	FROM information_schema.columns
	WHERE table_name=&apos;dim_time&apos;
	)
SELECT * FROM golden_metadata gm
except
SELECT * FROM utc 
UNION ALL 
SELECT * FROM utc 
EXCEPT 
SELECT * FROM golden_metadata gm</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check METADATA LND DIM_INVOICES_IN" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH 
golden_metadata AS
(
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;doc_type_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;doc_type&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;cust_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;invoice_no&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;invoice_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;date_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
	UNION ALL	
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;is_processed&apos; AS column_name, &apos;boolean&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;false&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_invoices_in&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
), 
utc AS
	(
	SELECT 	table_name,
			column_name,
			data_type,
			character_maximum_length,
			is_nullable,
			column_default
	FROM information_schema.columns
	WHERE table_name=&apos;dim_invoices_in&apos;
	)
SELECT * FROM golden_metadata gm
except
SELECT * FROM utc 
UNION ALL 
SELECT * FROM utc 
EXCEPT 
SELECT * FROM golden_metadata gm;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check METADATA LND  dim_warehouse_relations" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH 
golden_metadata AS
(
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;dlm&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;status&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;merch_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;order_type&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;w_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;is_processed&apos; AS column_name, &apos;boolean&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;false&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_warehouse_relations&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
), 
utc AS
	(
	SELECT 	table_name,
			column_name,
			data_type,
			character_maximum_length,
			is_nullable,
			column_default
	FROM information_schema.columns
	WHERE table_name=&apos;dim_warehouse_relations&apos;
	)
SELECT * FROM golden_metadata gm
except
SELECT * FROM utc 
UNION ALL 
SELECT * FROM utc 
EXCEPT 
SELECT * FROM golden_metadata gm;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check METADATA LND  dim_warehouse" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH 
golden_metadata AS
(
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;w_type_longname&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;w_type_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;country_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;country_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;region_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;region_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;district_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;district_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;city_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;city_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL	
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;distr_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;distr_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;cust_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;cust_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;w_longname&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;w_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
	256 AS character_maximum_length, &apos;YES&apos; AS is_nullable, NULL AS column_default
	UNION ALL	
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;is_processed&apos; AS column_name, &apos;boolean&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;false&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
	UNION ALL
	SELECT &apos;dim_warehouses&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type,
	NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;(&apos;&apos;now&apos;&apos;::text)::date&apos; AS column_default
), 
utc AS
	(
	SELECT 	table_name,
			column_name,
			data_type,
			character_maximum_length,
			is_nullable,
			column_default
	FROM information_schema.columns
	WHERE table_name=&apos;dim_warehouse_relations&apos;
	)
SELECT * FROM golden_metadata gm
except
SELECT * FROM utc 
UNION ALL 
SELECT * FROM utc 
EXCEPT 
SELECT * FROM golden_metadata gm;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">rows</stringProp>
          <stringProp name="resultVariable">rows</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">rows_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_merchandisers/EXT_LAYER.dimmerchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  lnd.lnd_count-ext.ext_count as difference 
FROM
(SELECT count(*) as lnd_count FROM LND_LAYER.dim_merchandisers) lnd, 
(SELECT count(*) as ext_count FROM EXT_LAYER.dimmerchandisers) ext;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_merchandisers</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_merchandisers_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LAYER_3NF.ce_warehouses table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">select warehouse_surr_id,
	   warehouse_src_id,
	   warehouse_name,
	   city_surr_id,
	   customer_surr_id,
	   src_table,
	   insert_dt,
	   update_dt 
from layer_3nf.ce_warehouses
limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">check_exist_3nf_warehouses</stringProp>
          <stringProp name="variableNames">check_exist_3nf_warehouses</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existence of ce_warehouses table" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_3nf_warehouses_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LAYER_3NF.ce_merchandisers table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">select merchandiser_surr_id,
	   merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en, 
	   src_table,
	   insert_dt,
	   update_dt 
from layer_3nf.ce_merchandisers
limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">check_exist_3nf_merchandisers</stringProp>
          <stringProp name="variableNames">check_exist_3nf_merchandisers</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existence of ce_merchandisers table" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_3nf_merchandisers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  full duplicates into LAYER_3NF.ce_product_groups tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select product_group_surr_id,
	   product_group_src_id,
	   product_group_name,
	   product_group_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_product_groups
group by product_group_surr_id,
	   product_group_src_id,
	   product_group_name,
	   product_group_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_prod_groups</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_prod_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_prod_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_prod_groups_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_products/LAYER_3NF.ce_product_categories tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  a-b as difference 
from
(select count(*) as a from 
		(	
			 SELECT product_category_src_id ,
				product_category_name ,
				product_category_name_en
			 FROM layer_3nf.ce_product_categories) a) lnd,
(select count(*)+1 as b from 			 			 
		(
			 SELECT distinct product_category_id ,
						product_category_name ,
						product_category_name_en 
			 FROM lnd_layer.dim_products) b) ext;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_prod_categories</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_prod_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_prod_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_prod_categories_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LND_LAYER.dim_merchandisers table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT merch_id,  merch_name, merch_name_en
, supervisor_id, supervisor_name, supervisor_name_en
, cust_id, cust_name, cust_name_en
, distr_id, distr_name, distr_name_en
, city_id, city_name, district_id
, district_name, region_id, region_name
, country_id, country_name, division_manager_id
, division_manager_name, region_manager_id, region_manager_name
FROM LND_LAYER.dim_merchandisers
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_exist_lnd_merchandisers</stringProp>
          <stringProp name="resultVariable">check_exist_lnd_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_lnd_merchandisers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_invoices/EXT_LAYER.diminvoices tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  lnd.lnd_count-ext.ext_count as difference 
FROM
(SELECT count(*) as lnd_count FROM LND_LAYER.dim_invoices) lnd, 
(SELECT count(*) as ext_count FROM EXT_LAYER.diminvoices) ext;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_invoices</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_invoices</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_invoices" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_invoices_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  full duplicates into LAYER_3NF.ce_product_types tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select product_type_surr_id,
	   product_type_src_id,
	   product_type_name,
	   product_type_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_product_types
group by product_type_surr_id,
	   product_type_src_id,
	   product_type_name,
	   product_type_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_prod_types</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_prod_types</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_prod_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_prod_types_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LND_LAYER.dim_products/LAYER_3NF.ce_product_groups tables " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from 
(
select distinct product_group_id ,
				product_group_name ,
				product_group_name_en 
from lnd_layer.dim_products dp 
union 
select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
) a
except 
select product_group_src_id ,
				product_group_name ,
				product_group_name_en 
from layer_3nf.ce_product_groups 
union all
select product_group_src_id ,
				product_group_name ,
				product_group_name_en 
from layer_3nf.ce_product_groups
except 
select * from 
(
select distinct product_group_id ,
				product_group_name ,
				product_group_name_en 
from lnd_layer.dim_products dp 
union 
select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
) a</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_ce_prod_groups</stringProp>
          <stringProp name="resultVariable">check_row_by_row_ce_prod_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_ce_prod_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_ce_prod_groups_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LAYER_3NF.ce_product_categories table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">select  product_category_surr_id,
		product_category_src_id,
		product_category_name,
		product_category_name_en,
		src_table,
		insert_dt,
		update_dt 
from layer_3nf.ce_product_categories
limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">check_exist_3nf_prod_categories</stringProp>
          <stringProp name="variableNames">check_exist_3nf_prod_categories</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existence of ce_product_check_exist_3nf_prod_categories table" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_3nf_prod_categories_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_products/LAYER_3NF.ce_product_types tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  a-b as difference 
from
(select count(*) as a from 
		(	
			 SELECT product_type_src_id ,
				product_type_name ,
				product_type_name_en
			 FROM layer_3nf.ce_product_types) a) lnd,
(select count(*)+1 as b from 			 			 
		(
			 SELECT distinct product_type_id ,
						product_type_name ,
						product_type_name_en 
			 FROM lnd_layer.dim_products) b) ext;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_prod_types</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_prod_types</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_prod_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_prod_types_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LND_LAYER.dim_products/LAYER_3NF.ce_product_categories tables " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from 
(
select distinct product_category_id ,
				product_category_name ,
				product_category_name_en 
from lnd_layer.dim_products dp 
union 
select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
) a
except 
select product_category_src_id ,
				product_category_name ,
				product_category_name_en 
from layer_3nf.ce_product_categories 
union all
select product_category_src_id ,
				product_category_name ,
				product_category_name_en 
from layer_3nf.ce_product_categories
except 
select * from 
(
select distinct product_category_id ,
				product_category_name ,
				product_category_name_en 
from lnd_layer.dim_products dp 
union 
select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
) a</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_ce_prod_categories</stringProp>
          <stringProp name="resultVariable">check_row_by_row_ce_prod_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_ce_prod_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_ce_prod_categories_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column data length LND_LAYER.dim_products/LAYER_3NF.ce_product_groups tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a.a_product_group_src_id-b_product_group_src_id)
	  + (a_product_group_name-b_product_group_name)
	  + (a_product_group_name_en-b_product_group_name_en) as length_difference
FROM 
	(
	SELECT sum(length(product_group_id)) as a_product_group_src_id, 
		   sum(length(product_group_name)) as a_product_group_name,  
		   sum(length(product_group_name_en)) as a_product_group_name_en
	FROM 
		(
			SELECT distinct product_group_id,
				   product_group_name,
				   product_group_name_en
			FROM lnd_layer.dim_products
			union all
			select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(length(product_group_src_id)) as b_product_group_src_id, 
		   sum(length(product_group_name))as b_product_group_name,  
		   sum(length(product_group_name_en))as b_product_group_name_en
	FROM layer_3nf.ce_product_groups
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_groups</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_groups_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column data length LND_LAYER.dim_products/LAYER_3NF.ce_product_categories tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a.a_product_category_src_id-b_product_category_src_id)
	  + (a_product_category_name-b_product_category_name)
	  + (a_product_category_name_en-b_product_category_name_en) as length_difference
FROM 
	(
	SELECT sum(length(product_category_id)) as a_product_category_src_id, 
		   sum(length(product_category_name)) as a_product_category_name,  
		   sum(length(product_category_name_en)) as a_product_category_name_en
	FROM 
		(
			SELECT distinct product_category_id,
				   product_category_name,
				   product_category_name_en
			FROM lnd_layer.dim_products
                        union all
			select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(length(product_category_src_id)) as b_product_category_src_id, 
		   sum(length(product_category_name))as b_product_category_name,  
		   sum(length(product_category_name_en))as b_product_category_name_en
	FROM layer_3nf.ce_product_categories
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_categories</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_categories_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LND_LAYER.dim_invoices table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">SELECT invoice_id  , invoice_no
 , merch_id , ol_id
 , date_id , status
 , status_name , cust_id
 , doc_type, doc_type_name
FROM LND_LAYER.dim_invoices
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">check_exist_lnd_invoices</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">check_exist_lnd_invoices</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_lnd_invoices_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LND_LAYER.dim_invoices/EXT_LAYER.diminvoices tables " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT invoice_id,  invoice_no, merch_id,     
       ol_id, date_id, status, statusname, cust_id, 
       doc_type, doctypename
FROM EXT_LAYER.diminvoices
EXCEPT
SELECT invoice_id,  invoice_no, merch_id, 
      ol_id, date_id, status, status_name, 
      cust_id, doc_type, doc_type_name
FROM LND_LAYER.dim_invoices
UNION ALL
SELECT invoice_id,  invoice_no, merch_id, 
      ol_id, date_id, status, status_name, 
      cust_id, doc_type, doc_type_name
FROM LND_LAYER.dim_invoices
EXCEPT
SELECT invoice_id,  invoice_no, merch_id,     
       ol_id, date_id, status, statusname, cust_id, 
       doc_type, doctypename
FROM EXT_LAYER.diminvoices;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_invoices</stringProp>
          <stringProp name="resultVariable">check_row_by_row_invoices</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_invoices" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_invoices_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  duplicates without PK into LAYER_3NF.ce_product_categories tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
	   product_category_src_id,
	   product_category_name,
	   product_category_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_product_categories
group by 
	   product_category_src_id,
	   product_category_name,
	   product_category_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_prod_categories</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_prod_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_prod_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_prod_categories_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LND_LAYER.dim_products/LAYER_3NF.ce_product_types tables " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from 
(
select distinct product_type_id ,
				product_type_name ,
				product_type_name_en 
from lnd_layer.dim_products dp 
union 
select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
) a
except 
select product_type_src_id ,
				product_type_name ,
				product_type_name_en 
from layer_3nf.ce_product_types 
union all
select product_type_src_id ,
				product_type_name ,
				product_type_name_en 
from layer_3nf.ce_product_types
except 
select * from 
(
select distinct product_type_id ,
				product_type_name ,
				product_type_name_en 
from lnd_layer.dim_products dp 
union 
select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
) a</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_ce_prod_types</stringProp>
          <stringProp name="resultVariable">check_row_by_row_ce_prod_types</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_ce_prod_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_ce_prod_types_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LND_LAYER.dim_merchandisers/EXT_LAYER.dimmerchandisers table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT merch_id,  merch_name, merch_name_en, supervisor_id, supervisor_name, 
      supervisor_name_en, cust_id, cust_name, cust_name_en, distr_id, distr_name, 
      distr_name_en, city_id, city_name, district_id, district_name, region_id, region_name, 
      country_id, country_name, divisionmanager_id, divisionmanager_name, 
      regionmanager_id, regionmanager_name
FROM EXT_LAYER.dimmerchandisers
EXCEPT
SELECT merch_id,  merch_name, merch_name_en, supervisor_id, supervisor_name,
     supervisor_name_en, cust_id, cust_name, cust_name_en, distr_id, distr_name,  
     distr_name_en, city_id, city_name, district_id, district_name, region_id, 
     region_name, country_id, country_name, division_manager_id, 
     division_manager_name, region_manager_id, region_manager_name
FROM LND_LAYER.dim_merchandisers
UNION ALL
SELECT merch_id,  merch_name, merch_name_en, supervisor_id, supervisor_name, 
     supervisor_name_en, cust_id, cust_name, cust_name_en, distr_id, distr_name, 
     distr_name_en, city_id, city_name, district_id, district_name, region_id, region_name, 
     country_id, country_name, division_manager_id, division_manager_name, 
     region_manager_id, region_manager_name
FROM LND_LAYER.dim_merchandisers
EXCEPT
SELECT merch_id,  merch_name, merch_name_en, supervisor_id,  supervisor_name, 
      supervisor_name_en, cust_id, cust_name, cust_name_en, distr_id, distr_name, 
      distr_name_en, city_id, city_name, district_id, district_name, region_id, region_name, 
      country_id, country_name, divisionmanager_id, 
      divisionmanager_name, regionmanager_id, regionmanager_name
FROM EXT_LAYER.dimmerchandisers</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_merchandisers</stringProp>
          <stringProp name="resultVariable">check_row_by_row_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_merchandisers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  duplicates without PK into LAYER_3NF.ce_product_types tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
	   product_type_src_id,
	   product_type_name,
	   product_type_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_product_types
group by 
	   product_type_src_id,
	   product_type_name,
	   product_type_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_prod_types</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_prod_types</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_prod_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_prod_types_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LAYER_3NF.ce_warehouses/LND_LAYER.dim_warehouses tables " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select warehouse_src_id,
	   customer_surr_id,
	   city_surr_id,
	   warehouse_name
from layer_3nf.ce_warehouses cw  
except
select * from 
	(
		select distinct dw.w_id,
						cc.customer_surr_id,
						cc2.city_surr_id, 
						dw.w_longname 
		from lnd_layer.dim_warehouses dw 
		left join layer_3nf.ce_customers cc 
		on cc.customer_src_id = dw.cust_id 
		and cc.customer_name = dw.cust_name 
		left join layer_3nf.ce_cities cc2 
		on cc2.city_src_id = dw.city_id 
		and cc2.city_name = dw.city_name 
		union 
		select &apos;N/A&apos;, -1, -1, &apos;N/A&apos;
	) a
union all
select * from 
	(
		select distinct dw.w_id,
						cc.customer_surr_id,
						cc2.city_surr_id, 
						dw.w_longname 
		from lnd_layer.dim_warehouses dw 
		left join layer_3nf.ce_customers cc 
		on cc.customer_src_id = dw.cust_id 
		and cc.customer_name = dw.cust_name 
		left join layer_3nf.ce_cities cc2 
		on cc2.city_src_id = dw.city_id 
		and cc2.city_name = dw.city_name 
		union 
		select &apos;N/A&apos;, -1, -1, &apos;N/A&apos;
	) a
except
select warehouse_src_id,
	   customer_surr_id,
	   city_surr_id,
	   warehouse_name
from layer_3nf.ce_warehouses cw  
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_ce_warehouses</stringProp>
          <stringProp name="resultVariable">check_row_by_row_ce_warehouses</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_ce_warehouses" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_ce_warehouses_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column data length LND_LAYER.dim_merchandisers/EXT_LAYER.dimmerchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a.a_merch_id-b.b_merch_id)
	+ (a.a_merch_name-b.b_merch_name)
	+ (a.a_merch_name_en-b.b_merch_name_en)
	+ (a.a_supervisor_id-b.b_supervisor_id)
	+ (a.a_supervisor_name-b.b_supervisor_name)
	+ (a.a_supervisor_name_en-b.b_supervisor_name_en)
	+ (a.a_cust_id-b.b_cust_id)
	+ (a.a_cust_name-b.b_cust_name)
	+ (a.a_cust_name_en-b.b_cust_name_en)
	+ (a.a_distr_id-b.b_distr_id)
	+ (a.a_distr_name-b.b_distr_name)
	+ (a.a_distr_name_en-b.b_distr_name_en)
	+ (a.a_city_id-b.b_city_id)
	+ (a.a_city_name-b.b_city_name)
	+ (a.a_district_id-b.b_district_id)
	+ (a.a_district_name-b.b_district_name)
	+ (a.a_region_id-b.b_region_id)
	+ (a.a_region_name-b.b_region_name)
	+ (a.a_country_id-b.b_country_id)
	+ (a.a_country_name-b.b_country_name)
	+ (a.a_division_manager_id-b.b_division_manager_id)
	+ (a.a_division_manager_name-b.b_division_manager_name)
	+ (a.a_region_manager_id-b.b_region_manager_id)
	+ (a.a_region_manager_name-b.b_region_manager_name) as length_difference
	FROM
	(	  	  
	SELECT sum(length(trim(merch_id))) as a_merch_id, 
		   sum(length(trim(merch_name))) as a_merch_name, 
		   sum(length(trim(merch_name_en))) as a_merch_name_en, 
		   sum(length(trim(supervisor_id))) as a_supervisor_id, 
		   sum(length(trim(supervisor_name))) as a_supervisor_name,
		   sum(length(trim(supervisor_name_en))) as a_supervisor_name_en,
		   sum(length(trim(cust_id))) as a_cust_id,
		   sum(length(trim(cust_name))) as a_cust_name,
		   sum(length(trim(cust_name_en))) as a_cust_name_en,	   
		   sum(length(trim(distr_id))) as a_distr_id, 
		   sum(length(trim(distr_name))) as a_distr_name, 
		   sum(length(trim(distr_name_en))) as a_distr_name_en,
		   sum(length(trim(city_id))) as a_city_id, 
		   sum(length(trim(city_name))) as a_city_name,
		   sum(length(trim(district_id))) as a_district_id,
		   sum(length(trim(district_name))) as a_district_name,
		   sum(length(trim(region_id))) as a_region_id,
		   sum(length(trim(region_name))) as a_region_name,
		   sum(length(trim(country_id))) as a_country_id,
		   sum(length(trim(country_name))) as a_country_name, 
		   sum(length(trim(divisionmanager_id))) as a_division_manager_id,
		   sum(length(trim(divisionmanager_name))) as a_division_manager_name,
		   sum(length(trim(regionmanager_id))) as a_region_manager_id,
		   sum(length(trim(regionmanager_name))) as a_region_manager_name  
	from ext_layer.dimmerchandisers
	) a,
	(
	select sum(length(merch_id)) as b_merch_id, 
		   sum(length(merch_name)) as b_merch_name,  
		   sum(length(merch_name_en)) as b_merch_name_en, 
		   sum(length(supervisor_id)) as b_supervisor_id, 
		   sum(length(supervisor_name)) as b_supervisor_name,
		   sum(length(supervisor_name_en)) as b_supervisor_name_en,
		   sum(length(cust_id)) as b_cust_id,
		   sum(length(cust_name)) as b_cust_name,
		   sum(length(cust_name_en)) as b_cust_name_en,	   
		   sum(length(distr_id)) as b_distr_id,
		   sum(length(distr_name)) as b_distr_name,
		   sum(length(distr_name_en)) as b_distr_name_en,
		   sum(length(city_id)) as b_city_id,
		   sum(length(city_name)) as b_city_name,
		   sum(length(district_id)) as b_district_id,
		   sum(length(district_name)) as b_district_name,
		   sum(length(region_id)) as b_region_id,
		   sum(length(region_name)) as b_region_name,
		   sum(length(country_id)) as b_country_id,
		   sum(length(country_name)) as b_country_name,
		   sum(length(division_manager_id)) as b_division_manager_id,
		   sum(length(division_manager_name)) as b_division_manager_name,
		   sum(length(region_manager_id)) as b_region_manager_id,
		   sum(length(region_manager_name)) as b_region_manager_name
	from lnd_layer.dim_merchandisers
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_merchandisers</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_merchandisers_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck row-by-rows LAYER_3NF.ce_merchandisers/LND_LAYER.dim_merchandisers tables " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en 
from layer_3nf.ce_merchandisers cm 
except
select * from 
	(
		select distinct dm.merch_id,
			   cc.customer_surr_id,
			   dm.merch_name,
			   dm.merch_name_en 
		from lnd_layer.dim_merchandisers dm 
		left join layer_3nf.ce_customers cc 
		on cc.customer_src_id = dm.cust_id 
		and cc.customer_name = dm.cust_name 
		union 
		select &apos;N/A&apos;, -1, &apos;N/A&apos;, &apos;N/A&apos;
	) a
union all
select * from 
	(
		select distinct dm.merch_id,
			   cc.customer_surr_id,
			   dm.merch_name,
			   dm.merch_name_en 
		from lnd_layer.dim_merchandisers dm 
		left join layer_3nf.ce_customers cc 
		on cc.customer_src_id = dm.cust_id 
		and cc.customer_name = dm.cust_name 
		union all 
		select &apos;N/A&apos;, -1, &apos;N/A&apos;, &apos;N/A&apos;
	) a
except
select merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en 
from layer_3nf.ce_merchandisers cm 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_row_by_row_ce_merchandisers</stringProp>
          <stringProp name="resultVariable">check_row_by_row_ce_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_row_by_row_ce_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_row_by_row_ce_merchandisers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_products/LAYER_3NF.ce_product_groups tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  a-b as difference 
from
(select count(*) as a from 
		(	
			 SELECT product_group_src_id ,
				product_group_name ,
				product_group_name_en
			 FROM layer_3nf.ce_product_groups) a) lnd,
(select count(*)+1 as b from 			 			 
		(
			 SELECT distinct product_group_id ,
						product_group_name ,
						product_group_name_en 
			 FROM lnd_layer.dim_products) b) ext;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_prod_groups</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_prod_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_prod_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_prod_groups_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column data length LND_LAYER.dim_invoices/EXT_LAYER.diminvoices tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a.a_invoice_id-b.b_invoice_id) 
	+ (a.a_invoice_no-b.b_invoice_no) 
	+ (a.a_merch_id-b.b_merch_id) 
	+ (a.a_ol_id-b.b_ol_id)
	+ (a.a_date_id-b.b_date_id)
	+ (a.a_status-b.b_status)
	+ (a.a_statusname-b.b_status_name)
	+ (a.a_doc_type-b.b_doc_type)
	+ (a.a_doctypename-b.b_doc_type_name) as length_difference
FROM 
	(
	SELECT sum(length(trim(invoice_id))) as a_invoice_id, 
		   sum(length(trim(invoice_no))) as a_invoice_no, 
		   sum(length(trim(merch_id))) as a_merch_id, 
		   sum(length(trim(ol_id))) as a_ol_id, 
		   sum(length(trim(date_id))) as a_date_id,
		   sum(length(trim(status))) as a_status,
		   sum(length(trim(statusname))) as a_statusname,
		   sum(length(trim(doc_type))) as a_doc_type,
		   sum(length(trim(doctypename))) as a_doctypename
	FROM ext_layer.diminvoices
	) a,
	(
	SELECT sum(length(invoice_id)) as b_invoice_id, 
		   sum(length(invoice_no))as b_invoice_no,  
		   sum(length(merch_id)) as b_merch_id,
		   sum(length(ol_id)) as b_ol_id,  
		   sum(length(date_id)) as b_date_id,
		   sum(length(status)) as b_status,
		   sum(length(status_name)) as b_status_name,
		   sum(length(doc_type)) as b_doc_type,
		   sum(length(doc_type_name)) as b_doc_type_name
	FROM lnd_layer.dim_invoices
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_invoices</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_invoices</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_invoices" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_invoices_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LAYER_3NF.ce_product_types table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">select  product_type_surr_id,
		product_type_src_id,
		product_type_name,
		product_type_name_en,
		src_table,
		insert_dt,
		update_dt 
from layer_3nf.ce_product_types
limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">check_exist_3nf_prod_types</stringProp>
          <stringProp name="variableNames">check_exist_3nf_prod_types</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existence of ce_product_types table" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_3nf_prod_types_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  full duplicates into LAYER_3NF.ce_product_categories tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select product_category_surr_id,
	   product_category_src_id,
	   product_category_name,
	   product_category_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_product_categories
group by product_category_surr_id,
	   product_category_src_id,
	   product_category_name,
	   product_category_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_prod_categories</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_prod_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_prod_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_prod_categories_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column data length LND_LAYER.dim_products/LAYER_3NF.ce_product_types tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a.a_product_type_src_id-b_product_type_src_id)
	  + (a_product_type_name-b_product_type_name)
	  + (a_product_type_name_en-b_product_type_name_en) as length_difference
FROM 
	(
	SELECT sum(length(product_type_id)) as a_product_type_src_id, 
		   sum(length(product_type_name)) as a_product_type_name,  
		   sum(length(product_type_name_en)) as a_product_type_name_en
	FROM 
		(
			SELECT distinct product_type_id,
				   product_type_name,
				   product_type_name_en
			FROM lnd_layer.dim_products
			union all
			select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(length(product_type_src_id)) as b_product_type_src_id, 
		   sum(length(product_type_name))as b_product_type_name,  
		   sum(length(product_type_name_en))as b_product_type_name_en
	FROM layer_3nf.ce_product_types
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_product_type</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_product_type</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_product_type" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_product_type_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck for the existence of LAYER_3NF.ce_product_groups table " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="query">select product_group_surr_id,
	   product_group_src_id,
	   product_group_name,
	   product_group_name_en,
	   src_table,
	   insert_dt,
	   update_dt 
from layer_3nf.ce_product_groups
limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">check_exist_3nf_prod_groups</stringProp>
          <stringProp name="variableNames">check_exist_3nf_prod_groups</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="existence of ce_product_types table" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_exist_3nf_prod_groups_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  duplicates without PK into LAYER_3NF.ce_product_groups tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
	   product_group_src_id,
	   product_group_name,
	   product_group_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_product_groups
group by 
	   product_group_src_id,
	   product_group_name,
	   product_group_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_prod_groups</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_prod_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_prod_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_prod_groups_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_warehouses/LAYER_3NF.ce_warehouses tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  a-b as difference 
from
(select count(*) as a from 
		(	
			 select warehouse_src_id,
				   customer_surr_id,
				   city_surr_id,
				   warehouse_name
			from layer_3nf.ce_warehouses cw ) a) lnd,
(select count(*)+1 as b from 			 			 
		(
			select distinct dw.w_id,
						cc.customer_surr_id,
						cc2.city_surr_id, 
						dw.w_longname 
		from lnd_layer.dim_warehouses dw 
		left join layer_3nf.ce_customers cc 
		on cc.customer_src_id = dw.cust_id 
		and cc.customer_name = dw.cust_name 
		left join layer_3nf.ce_cities cc2 
		on cc2.city_src_id = dw.city_id 
		and cc2.city_name = dw.city_name ) b) ext;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_warehouses</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_warehouses</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_warehouses" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_warehouses_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck count of rows LND_LAYER.dim_merchandisers/LAYER_3NF.ce_merchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  a-b as difference 
from
(select count(*) as a from 
		(	
			 select merchandiser_src_id,
				   customer_surr_id,
				   merchandiser_name,
				   merchandiser_name_en 
			from layer_3nf.ce_merchandisers cm) a) lnd,
(select count(*)+1 as b from 			 			 
		(
			select distinct dm.merch_id,
				   cc.customer_surr_id,
				   dm.merch_name,
				   dm.merch_name_en 
			from lnd_layer.dim_merchandisers dm 
			left join layer_3nf.ce_customers cc 
			on cc.customer_src_id = dm.cust_id 
			and cc.customer_name = dm.cust_name) b) ext;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_count_differ_from_rows_merchandisers</stringProp>
          <stringProp name="resultVariable">check_count_differ_from_rows_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_count_differ_from_rows_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_count_differ_from_rows_merchandisers_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of string column data length LND_LAYER.dim_merchandisers/LAYER_3NF.ce_merchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a_merch_id-b_merchandiser_src_id)
	  + (a_merch_name-b_merchandiser_name)
	  + (a_merch_name_en-b_merchandiser_name_en) as length_difference
FROM 
	(
	SELECT sum(length(merch_id)) as a_merch_id, 
		   sum(length(merch_name)) as a_merch_name,  
		   sum(length(merch_name_en)) as a_merch_name_en
	FROM 
		(
			select distinct dm.merch_id,
				   dm.merch_name,
				   dm.merch_name_en 
			from lnd_layer.dim_merchandisers dm 
			union all
			select &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(length(merchandiser_src_id)) as b_merchandiser_src_id, 
		   sum(length(merchandiser_name))as b_merchandiser_name,  
		   sum(length(merchandiser_name_en))as b_merchandiser_name_en
	FROM layer_3nf.ce_merchandisers
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_merchandisers</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_merchandisers_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of string column data length LND_LAYER.dim_warehouses/LAYER_3NF.ce_warehouses tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a_w_id-b_warehouse_src_id)
	  + (a_w_longname-b_warehouse_name) as length_difference
FROM 
	(
	SELECT sum(length(w_id)) as a_w_id, 
		   sum(length(w_longname)) as a_w_longname
	FROM 
		(
		select distinct dw.w_id, 
						dw.w_longname 
		from lnd_layer.dim_warehouses dw
			union all
			select &apos;N/A&apos;, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(length(warehouse_src_id)) as b_warehouse_src_id, 
		   sum(length(warehouse_name))as b_warehouse_name
	FROM layer_3nf.ce_warehouses
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datalenght_warehouses</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datalenght_warehouses</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datalenght_warehouses" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datalenght_warehouses_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column with integer data LND_LAYER.dim_warehouses/LAYER_3NF.ce_warehouses tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a_customer_surr_id-b_customer_surr_id)
	  + (a_city_surr_id-b_city_surr_id) as length_difference
FROM 
	(
	SELECT sum(customer_surr_id) as a_customer_surr_id, 
		   sum(city_surr_id) as a_city_surr_id
	FROM 
		(
			select distinct dw.w_id,
						cc.customer_surr_id,
						cc2.city_surr_id, 
						dw.w_longname 
			from lnd_layer.dim_warehouses dw 
			left join layer_3nf.ce_customers cc 
			on cc.customer_src_id = dw.cust_id 
			and cc.customer_name = dw.cust_name 
			left join layer_3nf.ce_cities cc2 
			on cc2.city_src_id = dw.city_id 
			and cc2.city_name = dw.city_name
			union all
			select &apos;N/A&apos;, -1, -1, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(customer_surr_id) as b_customer_surr_id, 
		   sum(city_surr_id) as b_city_surr_id
	FROM layer_3nf.ce_warehouses
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datasum_warehouses</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datasum_warehouses</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datasum_warehouses" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datasum_warehouses_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck sum of column with integer data LND_LAYER.dim_merchandisers/LAYER_3NF.ce_merchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT a_customer_surr_id-b_customer_surr_id as length_difference
FROM 
	(
	SELECT sum(customer_surr_id) as a_customer_surr_id
	FROM 
		(
			select distinct dm.merch_id,
				   cc.customer_surr_id,
				   dm.merch_name,
				   dm.merch_name_en 
			from lnd_layer.dim_merchandisers dm 
			left join layer_3nf.ce_customers cc 
			on cc.customer_src_id = dm.cust_id 
			and cc.customer_name = dm.cust_name 
			union all
			select &apos;N/A&apos;, -1, &apos;N/A&apos;, &apos;N/A&apos;
		) d
	) a,
	(
	SELECT sum(customer_surr_id) as b_customer_surr_id
	FROM layer_3nf.ce_merchandisers
	) b</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_sum_differ_from_datasum_merchandisers</stringProp>
          <stringProp name="resultVariable">check_sum_differ_from_datasum_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_sum_differ_from_datasum_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_sum_differ_from_datasum_merchandisers_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  full duplicates into LND_LAYER.dim_warehouses/LAYER_3NF.ce_warehouses tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select warehouse_surr_id,
	   warehouse_src_id,
	   warehouse_name,
	   city_surr_id,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_warehouses cw 
group by warehouse_surr_id,
	   warehouse_src_id,
	   warehouse_name,
	   city_surr_id,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_warehouses</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_warehouses</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_warehouses" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_warehouses_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  full duplicates into LND_LAYER.dim_merchandisers/LAYER_3NF.ce_merchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select merchandiser_surr_id,
	   merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_merchandisers cm
group by merchandiser_surr_id,
	   merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_merchandisers</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_merchandisers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  duplicates without PK into LAYER_3NF.ce_merchandisers tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
	   merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_merchandisers cm
group by 
	   merchandiser_src_id,
	   customer_surr_id,
	   merchandiser_name,
	   merchandiser_name_en,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_merchandisers</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_merchandisers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_merchandisers" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_merchandisers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck  duplicates without PK into LAYER_3NF.ce_warehouses tables" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 
	   warehouse_src_id,
	   warehouse_name,
	   city_surr_id,
	   src_table,
	   insert_dt,
	   update_dt,
	   count(*)
from layer_3nf.ce_warehouses cw 
group by 
	   warehouse_src_id,
	   warehouse_name,
	   city_surr_id,
	   src_table,
	   insert_dt,
	   update_dt
having count(*)&gt;1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_full_duplicates_into_warehouses</stringProp>
          <stringProp name="resultVariable">check_full_duplicates_into_warehouses</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_full_duplicates_into_warehouses" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_full_duplicates_into_warehouses_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check null in layer_3nf.ce_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select (count(*) - count(product_surr_id))
		+ (count(*) - count(product_src_id))
		+ (count(*) - count(product_name))
		+ (count(*) - count(product_name_en))
		+ (count(*) - count(product_code))
		+ (count(*) - count(product_type_surr_id))
		+ (count(*) - count(product_group_surr_id))
		+ (count(*) - count(product_category_surr_id))
		+ (count(*) - count(src_table))
		+ (count(*) - count(insert_dt))
		+ (count(*) - count(update_dt)) qty_null
from layer_3nf.ce_products ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_null_in_ce_products</stringProp>
          <stringProp name="resultVariable">check_null_in_ce_products</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_null_in_ce_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_null_in_ce_products_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check null in layer_3nf.ce_product_groups" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select (count(*) - count(product_group_surr_id))
		+ (count(*) - count(product_group_src_id))
		+ (count(*) - count(product_group_name))
		+ (count(*) - count(product_group_name_en))
		+ (count(*) - count(src_table))
		+ (count(*) - count(insert_dt))
		+ (count(*) - count(update_dt)) qty_null
from layer_3nf.ce_product_groups cpc ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_null_in_ce_products_groups</stringProp>
          <stringProp name="resultVariable">check_null_in_ce_products_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_null_in_ce_products_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_null_in_ce_products_groups_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check null in layer_3nf.ce_product_types" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select (count(*) - count(product_type_surr_id))
		+ (count(*) - count(product_type_src_id))
		+ (count(*) - count(product_type_name))
		+ (count(*) - count(product_type_name_en))
		+ (count(*) - count(src_table))
		+ (count(*) - count(insert_dt))
		+ (count(*) - count(update_dt)) qty_null
from layer_3nf.ce_product_types cpc ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_null_in_ce_products_types</stringProp>
          <stringProp name="resultVariable">check_null_in_ce_products_types</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_null_in_ce_products_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_null_in_ce_products_types_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check null in layer_3nf.ce_product_categories" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select (count(*) - count(product_category_surr_id))
		+ (count(*) - count(product_category_src_id))
		+ (count(*) - count(product_category_name))
		+ (count(*) - count(product_category_name_en))
		+ (count(*) - count(src_table))
		+ (count(*) - count(insert_dt))
		+ (count(*) - count(update_dt)) qty_null
from layer_3nf.ce_product_categories cpc ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_null_in_ce_products_categories</stringProp>
          <stringProp name="resultVariable">check_null_in_ce_products_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_null_in_ce_products_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_null_in_ce_products_categories_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check constraints in layer_3nf.ce_products" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_products&apos;
AND contype=&apos;p&apos;
union all
SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_products&apos;
AND contype=&apos;f&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_constraints_in_ce_products</stringProp>
          <stringProp name="resultVariable">check_constraints_in_ce_products</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_products_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_products" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51">3</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_products_2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check constraints in layer_3nf.ce_product_groups" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_product_groups&apos;
AND contype=&apos;p&apos;
union all
SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_product_groups&apos;
AND contype=&apos;f&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_constraints_in_ce_product_groups</stringProp>
          <stringProp name="resultVariable">check_constraints_in_ce_product_groups</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_product_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_product_groups_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_product_groups" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_product_groups_2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check constraints in layer_3nf.ce_product_types" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_product_types&apos;
AND contype=&apos;p&apos;
union all
SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_product_types&apos;
AND contype=&apos;f&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_constraints_in_ce_product_types</stringProp>
          <stringProp name="resultVariable">check_constraints_in_ce_product_types</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_product_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_product_types_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_product_types" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_product_types_2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="check constraints in layer_3nf.ce_product_categories" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_product_categories&apos;
AND contype=&apos;p&apos;
union all
SELECT count(conname)
FROM pg_catalog.pg_constraint con
INNER JOIN pg_catalog.pg_class rel
ON rel.oid = con.conrelid
INNER JOIN pg_catalog.pg_namespace nsp
ON nsp.oid = connamespace
WHERE nsp.nspname = &apos;layer_3nf&apos;
AND rel.relname = &apos;ce_product_categories&apos;
AND contype=&apos;f&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">check_constraints_in_ce_product_categories</stringProp>
          <stringProp name="resultVariable">check_constraints_in_ce_product_categories</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_product_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_product_categories_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check_constraints_in_ce_product_categories" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">check_constraints_in_ce_product_categories_2</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check existence of lnd_layer.fct_outlet_order_h   " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT date_id, merch_id,
ol_id, order_no,
w_id, begin_min_id,
end_min_id, mins_spent,
part_id
FROM lnd_layer.fct_outlet_order_h
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist_lnd_layer.fct_outlet_order_h </stringProp>
          <stringProp name="resultVariable">exist_lnd_layer.fct_outlet_order_h</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">1</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist_lnd_layer.fct_outlet_order_h_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check existance of lnd_layer.fct_sales_in_d " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT invoice_id, invoice_no,
date_id, product_id,
product_qty, package_qty,
weight_kg, amount,
cust_id, price,
part_id
FROM lnd_layer.fct_sales_in_d
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">lnd_layer.fct_sales_in_d </stringProp>
          <stringProp name="resultVariable">lnd_layer.fct_sales_in_d </stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">lnd_layer.fct_sales_in_d_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check existance of lnd_layer.fct_sales_out_d " enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT invoice_id, invoice_no, order_no,
merch_id, ol_id, date_id,
status, status_name, product_id,
product_qty, package_qty, weight_kg,
amount, cust_id, price, part_id
FROM lnd_layer.fct_sales_out_d
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist_lnd_layer.fct_sales_out_d </stringProp>
          <stringProp name="resultVariable">exist_lnd_layer.fct_sales_out_d </stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist_lnd_layer.fct_sales_out_d_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare count of rows in tables lnd_layer.fct_outlet_order_h and ext_layer.factoutletorderh" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT source.n as rows_ext_fct_outlet_order_h, target.n as rows_lnd_factoutletorderh, (source.n-target.n) as difference 
FROM (SELECT count(*) as n FROM ext_layer.factoutletorderh) source, 
(SELECT count(*) as n FROM lnd_layer.fct_outlet_order_h) target;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count_of_rows_ext_factoutletorderh</stringProp>
          <stringProp name="resultVariable">count_of_rows_ext_factoutletorderh</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count_of_rows_ext_factoutletorderh</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare count of rows in tableslnd_layer.fct_sales_out_d and ext_layer.factsaloutd" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT source.n as rows_ext_fct_sales_out_d, target.n as rows_lnd_factsaloutd, (source.n-target.n) as difference 
FROM (SELECT count(*) as n FROM ext_layer.factsaloutd) source, 
(SELECT count(*) as n FROM lnd_layer.fct_sales_out_d) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count_of_rows_factsaloutd</stringProp>
          <stringProp name="resultVariable">count_of_rows_factsaloutd</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count_of_rows_factsaloutd</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare count of rows in tableslnd_layer.fct_sales_in_d and ext_layer.factsalind" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT source.n as rows_ext_fct_sales_in_d, target.n as rows_lnd_factsalind, (source.n-target.n) as difference 
FROM (SELECT count(*) as n FROM ext_layer.factsalind) source, 
(SELECT count(*) as n FROM lnd_layer.fct_sales_in_d) target;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count_of_rows_factsalind</stringProp>
          <stringProp name="resultVariable">count_of_rows_factsalind</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count_of_rows_factsalind</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check layer_3nf.ce_customers table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT customer_surr_id, 
customer_src_id, 
distributor_surr_id, 
customer_name,
customer_name_en, 
src_table, 
insert_dt, 
update_dt 
FROM layer_3nf.ce_customers
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist_ce_customers</stringProp>
          <stringProp name="resultVariable">exist_ce_customers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist_ce_customers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck metadata in layer_3nf.ce_customers" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH golden_metadata AS
(
SELECT &apos;ce_customers&apos; AS table_name, &apos;customer_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable,&apos;nextval(&apos;&apos;layer_3nf.ce_customers_seq&apos;&apos;::regclass)&apos; AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;customer_src_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;distributor_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;city_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;customer_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;customer_name_en&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;src_table&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default
UNION ALL
SELECT &apos;ce_customers&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default
), utc AS
(
SELECT table_name,
column_name,
data_type,
character_maximum_length,
is_nullable,
column_default
FROM information_schema.columns
WHERE table_name=&apos;ce_customers&apos;
)
SELECT *
FROM golden_metadata 
except
SELECT *
FROM utc
UNION ALL
SELECT * FROM utc
EXCEPT
SELECT * FROM golden_metadata;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">metadata_ce_customers</stringProp>
          <stringProp name="resultVariable">metadata_ce_customers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">metadata_ce_customers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check metadata in layer_3nf.ce_distributors" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">WITH golden_metadata AS
(
SELECT &apos;ce_distributors&apos; AS table_name, &apos;distributor_surr_id&apos; AS column_name, &apos;integer&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;nextval(&apos;&apos;layer_3nf.ce_distributors_seq&apos;&apos;::regclass)&apos; AS column_default
UNION ALL
SELECT &apos;ce_distributors&apos; AS table_name, &apos;distributor_src_id&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_distributors&apos; AS table_name, &apos;distributor_name&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_distributors&apos; AS table_name, &apos;distributor_name_en&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_distributors&apos; AS table_name, &apos;src_table&apos; AS column_name, &apos;character varying&apos; AS data_type,
256 AS character_maximum_length, &apos;NO&apos; AS is_nullable, NULL AS column_default
UNION ALL
SELECT &apos;ce_distributors&apos; AS table_name, &apos;insert_dt&apos; AS column_name, &apos;date&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default
UNION ALL
SELECT &apos;ce_distributors&apos; AS table_name, &apos;update_dt&apos; AS column_name, &apos;date&apos; AS data_type,
NULL AS character_maximum_length, &apos;NO&apos; AS is_nullable, &apos;CURRENT_DATE&apos; AS column_default
), utc AS
(
SELECT table_name,
column_name,
data_type,
character_maximum_length,
is_nullable,
column_default
FROM information_schema.columns
WHERE table_name=&apos;ce_distributors&apos;
)
SELECT *
FROM golden_metadata 
except
SELECT *
FROM utc
UNION ALL
SELECT * FROM utc
EXCEPT
SELECT * FROM golden_metadata;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">metadata_ce_distributors</stringProp>
          <stringProp name="resultVariable">metadata_ce_distributors</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">metadata_ce_distributors_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check layer_3nf.ce_distributors table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distributor_surr_id, 
distributor_src_id,
distributor_name, 
distributor_name_en, 
src_table, 
insert_dt, 
update_dt 
FROM layer_3nf.ce_distributors 
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist_ce_distributors</stringProp>
          <stringProp name="resultVariable">exist_ce_distributors</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist_ce_distributors_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check duplicates in layer_3nf.ce_customers without PK" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT customer_src_id,
distributor_surr_id,
city_surr_id,
customer_name,
customer_name_en,
src_table,
insert_dt, update_dt, count(*)
FROM layer_3nf.ce_customers
GROUP BY
customer_src_id,
distributor_surr_id,
city_surr_id,
customer_name,
customer_name_en,
src_table,
insert_dt, update_dt
HAVING count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dup_ce_customers_without_pk</stringProp>
          <stringProp name="resultVariable">dup_ce_customers_without_pk</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dup_ce_customers_without_pk_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare sum of numeric values in layer_3nf.ce_outlet_orders / lnd_layer.fct_outlet_order_d" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT  (a_order_no-b_order_no)
	  + (a_product_qty-b_product_qty)
	  + (a_weight_kg-b_weight_kg)
	  + (a_price-b_price) 
	  + (a_vat-b_vat)
	  + (a_amount-b_amount)
	  + (a_begin_minute-b_begin_minute) 
	  + (a_end_minute-b_end_minute)
	  + (a_minutes_spent - b_minutes_spent) as difference
FROM 
	(	SELECT sum(order_no) as a_order_no,
		   sum(product_qty) as a_product_qty, 
		   sum(weight_kg) as a_weight_kg,  
		   sum(price) as a_price,
		   sum(vat) as a_vat,
		   sum(amount) as a_amount,
		   sum(begin_min_id) as a_begin_minute,
		   sum(end_min_id) as a_end_minute,
		   sum(mins_spent) as a_minutes_spent
FROM 		(	SELECT food.order_no::BIGINT AS order_no 
,ROUND(ABS(food.product_qty::NUMERIC(10,2))) AS product_qty
,CASE WHEN ABS(food.weight_kg::NUMERIC(10,2)) = 0 THEN 1 ELSE ABS(food.weight_kg::NUMERIC(10,2)) END AS weight_kg
,CASE WHEN ABS(food.price::NUMERIC(10,2)) = 0 THEN 1 ELSE ABS(food.price::NUMERIC(10,2)) END AS price
,ABS(food.vat::NUMERIC(10,2)) AS vat
,CASE WHEN ABS(food.amount::NUMERIC(10,2)) = 0 THEN 1 ELSE ABS(food.amount::NUMERIC(10,2)) END AS amount
,CASE WHEN ABS(food.begin_min_id::INT) &gt; ABS(food.end_min_id::INT) THEN ABS(food.end_min_id::INT) ELSE ABS(food.begin_min_id::INT) END AS begin_min_id
,CASE WHEN ABS(food.begin_min_id::INT) &gt; ABS(food.end_min_id::INT) THEN ABS(food.begin_min_id::INT) ELSE ABS(food.end_min_id::INT) END AS end_min_id
,ABS(food.mins_spent::INT) AS mins_spent
		FROM lnd_layer.fct_outlet_order_d food
		) c ) a,
		(  SELECT sum(order_number) as b_order_no,
		   sum(product_quantity) as b_product_qty, 
		   sum(weight_kg) as b_weight_kg,  
		   sum(price) as b_price,
		   sum(vat) as b_vat,
		   sum(amount) as b_amount,
		   sum(begin_minute) as b_begin_minute,
		   sum(end_minute) as b_end_minute,
		   sum(minutes_spent) as b_minutes_spent
		FROM layer_3nf.ce_outlet_orders) b;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">sum_ce_outlet_orders</stringProp>
          <stringProp name="resultVariable">sum_ce_outlet_orders</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">sum_ce_outlet_orders</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check nulls in layer_3nf.ce_distributors" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
FROM layer_3nf.ce_distributors
WHERE distributor_surr_id IS null
OR distributor_src_id IS null
OR  distributor_name IS null
OR src_table IS NULL;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">nulls_ce_distributors</stringProp>
          <stringProp name="resultVariable">nulls_ce_distributors</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">nulls_ce_distributors_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare sum of length of rows in layer_3nf.ce_distributors/lnd_layer.dim_distributors" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a_distr_id-b_distributor_src_id)
	  + (a_distr_name-b_distributor_name)
	  + (a_distr_name_en-b_distributor_name_en) as difference
FROM 
	(	SELECT sum(length(distr_id)) as a_distr_id, 
		   sum(length(distr_name)) as a_distr_name,  
		   sum(length(distr_name_en)) as a_distr_name_en
FROM 		(SELECT DISTINCT distr_id, 
				   distr_name,
				   distr_name_en
FROM (	SELECT distr_id, 
				   distr_name,
				   distr_name_en
		FROM lnd_layer.dim_merchandisers
		UNION  
		SELECT distr_id, 
				   distr_name,
				   distr_name_en
		FROM lnd_layer.dim_outlets
		UNION 
		SELECT distr_id, 
				   distr_name,
				   distr_name AS distr_name_en
		FROM lnd_layer.dim_warehouses
		UNION  
		SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;) c
		WHERE distr_name NOT LIKE &apos;Unknown%&apos; )a) d,
		(SELECT sum(length(distributor_src_id)) as b_distributor_src_id, 
		   sum(length(distributor_name)) as b_distributor_name,  
		   sum(length(distributor_name_en)) as b_distributor_name_en
		FROM layer_3nf.ce_distributors) b;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">sum_of_length_ce_distributors</stringProp>
          <stringProp name="resultVariable">sum_of_length_ce_distributors</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">sum_of_length_ce_distributors</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Row by row check in layer_3nf.ce_customers" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT cust_id,
				cust_name,
				cust_name_en,
				distributor_surr_id,
				city_surr_id
FROM (SELECT DISTINCT dw.cust_id,
dw.cust_name,
dw.cust_name as cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_warehouses dw
LEFT JOIN layer_3nf.ce_distributors cd
ON dw.distr_id =cd.distributor_src_id
AND dw.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dw.city_id
AND cc.city_name = dw.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_outlets do2
LEFT JOIN layer_3nf.ce_distributors cd
ON do2.distr_id =cd.distributor_src_id
AND do2.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = do2.city_id
AND cc.city_name = do2.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_merchandisers dm
LEFT JOIN layer_3nf.ce_distributors cd
ON dm.distr_id =cd.distributor_src_id
AND dm.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dm.city_id
AND cc.city_name = dm.city_name
UNION 
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;, -1, -1
) a
EXCEPT  
SELECT customer_src_id ,
				customer_name ,
				customer_name_en ,
				distributor_surr_id,
				city_surr_id
FROM layer_3nf.ce_customers
UNION ALL
SELECT customer_src_id ,
				customer_name ,
				customer_name_en, 
				distributor_surr_id,
				city_surr_id
FROM layer_3nf.ce_customers
EXCEPT 
SELECT 			cust_id ,
				cust_name ,
				cust_name_en,
				distributor_surr_id,
				city_surr_id
FROM (SELECT DISTINCT dw.cust_id,
dw.cust_name,
dw.cust_name as cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_warehouses dw
LEFT JOIN layer_3nf.ce_distributors cd
ON dw.distr_id =cd.distributor_src_id
AND dw.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dw.city_id
AND cc.city_name = dw.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_outlets do2
LEFT JOIN layer_3nf.ce_distributors cd
ON do2.distr_id =cd.distributor_src_id
AND do2.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = do2.city_id
AND cc.city_name = do2.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_merchandisers dm
LEFT JOIN layer_3nf.ce_distributors cd
ON dm.distr_id =cd.distributor_src_id
AND dm.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dm.city_id
AND cc.city_name = dm.city_name
UNION 
SELECT  &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;, -1, -1 )b ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row_by_row_ce_customers</stringProp>
          <stringProp name="resultVariable">row_by_row_ce_customers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row_by_row_ce_customers_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare sum of length of rows in layer_3nf.ce_customers/lnd_layer.dim_customers" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT (a_cust_id-b_customer_src_id)
	  + (a_cust_name-b_customer_name)
	  + (a_cust_name_en-b_customer_name_en) as difference
FROM 
	(	SELECT sum(length(cust_id)) as a_cust_id, 
		   sum(length(cust_name)) as a_cust_name,  
		   sum(length(cust_name_en)) as a_cust_name_en
FROM 		(SELECT DISTINCT cust_id, 
				   cust_name,
				   cust_name_en
FROM (SELECT DISTINCT dw.cust_id,
dw.cust_name,
dw.cust_name as cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_warehouses dw
LEFT JOIN layer_3nf.ce_distributors cd
ON dw.distr_id =cd.distributor_src_id
AND dw.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dw.city_id
AND cc.city_name = dw.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_outlets do2
LEFT JOIN layer_3nf.ce_distributors cd
ON do2.distr_id =cd.distributor_src_id
AND do2.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = do2.city_id
AND cc.city_name = do2.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_merchandisers dm
LEFT JOIN layer_3nf.ce_distributors cd
ON dm.distr_id =cd.distributor_src_id
AND dm.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dm.city_id
AND cc.city_name = dm.city_name
UNION 
SELECT  &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;, -1, -1) c
		WHERE cust_name NOT LIKE &apos;Unknown%&apos;)a) d,
		(SELECT sum(length(customer_src_id)) as b_customer_src_id, 
		   sum(length(customer_name)) as b_customer_name,  
		   sum(length(customer_name_en)) as b_customer_name_en
		FROM layer_3nf.ce_customers) b;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">sum_of_length_ce_customers</stringProp>
          <stringProp name="resultVariable">sum_of_length_ce_customers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">sum_of_length_ce_customers</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Row by row check in layer_3nf.ce_distributors" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distr_id,
				distr_name,
				distr_name_en
FROM (SELECT DISTINCT distr_id,
				distr_name,
				distr_name_en
FROM lnd_layer.dim_merchandisers  
UNION ALL 
SELECT DISTINCT distr_id,
				distr_name,
				distr_name_en
FROM lnd_layer.dim_outlets  
UNION ALL
SELECT DISTINCT distr_id, distr_name, distr_name AS distr_name_en
FROM lnd_layer.dim_warehouses
UNION  
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;) a
EXCEPT  
select distributor_src_id,
				distributor_name ,
				distributor_name_en 
FROM layer_3nf.ce_distributors
UNION all
SELECT distributor_src_id,
				distributor_name ,
				distributor_name_en 
FROM layer_3nf.ce_distributors
EXCEPT 
SELECT distr_id,
				distr_name,
				distr_name_en
FROM (SELECT DISTINCT distr_id,
				distr_name,
				distr_name_en
FROM lnd_layer.dim_merchandisers  
UNION  
SELECT DISTINCT distr_id,
				distr_name,
				distr_name_en
FROM lnd_layer.dim_outlets  
UNION 
SELECT DISTINCT distr_id, distr_name, distr_name AS distr_name_en
FROM lnd_layer.dim_warehouses
UNION  
SELECT &apos;N/A&apos;, &apos;N/A&apos;, &apos;N/A&apos;)c ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">row_by_row_ce_distributors</stringProp>
          <stringProp name="resultVariable">row_by_row_ce_distributors</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">row_by_row_ce_distributors_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check duplicates in layer_3nf.ce_distributors without PK" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 
distributor_src_id,
distributor_name,
distributor_name_en,
src_table,
insert_dt, update_dt, count(*)
FROM layer_3nf.ce_distributors
GROUP BY 
distributor_src_id,
distributor_name,
distributor_name_en,
src_table,
insert_dt, update_dt
HAVING count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dup_ce_distributors_without_pk</stringProp>
          <stringProp name="resultVariable">dup_ce_distributors_without_pk</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dup_ce_distributors_without_pk_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check layer_3nf.ce_outlet_orders table existence" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT merchandiser_surr_id,
outlet_surr_id,
product_surr_id,
warehouse_surr_id,
date_id,
outlet_card_id,
order_number,
product_quantity,
weight_kg,
price,
vat,
amount,
begin_minute,
end_minute,
minutes_spent,
insert_dt,
update_dt 
FROM layer_3nf.ce_outlet_orders 
LIMIT 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">exist_ce_outlet_orders</stringProp>
          <stringProp name="resultVariable">exist_ce_outlet_orders</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">exist_ce_outlet_orders_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck nulls in layer_3nf.ce_customers" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
FROM layer_3nf.ce_customers	
WHERE customer_src_id IS NULL
OR customer_name IS NULL
OR customer_name_en IS NULL
OR customer_surr_id IS NULL
OR distributor_surr_id IS NULL
OR city_surr_id IS NULL;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">nulls_ce_customers</stringProp>
          <stringProp name="resultVariable">nulls_ce_customers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">nulls_ce_customers_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check full duplicates in layer_3nf.ce_outlet_orders" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 
merchandiser_surr_id,
outlet_surr_id,
product_surr_id,
warehouse_surr_id,
date_id,
outlet_card_id,
order_number,
product_quantity,
weight_kg,
price,
vat,
amount,
begin_minute,
end_minute,
minutes_spent,
insert_dt,
update_dt, count(*)
FROM layer_3nf.ce_outlet_orders coo 
GROUP BY merchandiser_surr_id,
outlet_surr_id,
product_surr_id,
warehouse_surr_id,
date_id,
outlet_card_id,
order_number,
product_quantity,
weight_kg,
price,
vat,
amount,
begin_minute,
end_minute,
minutes_spent,
insert_dt,
update_dt
HAVING count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dup_ce_outlet_orders_full</stringProp>
          <stringProp name="resultVariable">dup_ce_outlet_orders_full</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dup_ce_outlet_orders_full_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare count of rows in layer_3nf.ce_outlet_orders" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT src.n as rows_lnd_outlet_orders, trg.n as rows_3nf_outlet_orders, (src.n-trg.n) as difference
FROM 
(SELECT count(*) AS n
FROM    (SELECT m.merchandiser_surr_id, co.outlet_surr_id, cp.product_surr_id, cw.warehouse_surr_id,
food.date_id,
food.olcard_id,
food.order_no,
food.product_qty,
food.weight_kg,
food.price,
food.vat,
food.amount,
food.begin_min_id,
food.end_min_id,
food.mins_spent
FROM lnd_layer.fct_outlet_order_d food
LEFT JOIN layer_3nf.ce_merchandisers m
ON food.merch_id = m.merchandiser_src_id
LEFT JOIN layer_3nf.ce_outlets co 
ON food.ol_id = co.outlet_src_id
LEFT JOIN layer_3nf.ce_products cp 
ON food.product_id = cp.product_src_id
LEFT JOIN layer_3nf.ce_warehouses cw 
ON food.w_id = cw.warehouse_src_id)r
) src,         
      (SELECT count(*) AS n
       FROM layer_3nf.ce_outlet_orders) trg;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count_ce_outlet_orders</stringProp>
          <stringProp name="resultVariable">count_ce_outlet_orders</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count_ce_outlet_orders</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck if amount, weight_kg and price = 0 in layer_3nf.ce_outlet_order" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT * FROM layer_3nf.ce_outlet_orders
WHERE weight_kg = 0 OR amount = 0 OR price = 0;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">zero_in_ce_outlet_orders</stringProp>
          <stringProp name="resultVariable">zero_in_ce_outlet_orders</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">zero_in_ce_outlet_orders_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check nulls in layer_3nf.ce_outlet_orders" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
FROM layer_3nf.ce_outlet_orders	
WHERE merchandiser_surr_id IS NULL
OR outlet_surr_id IS NULL
OR product_surr_id IS NULL
OR warehouse_surr_id IS NULL
OR date_id IS NULL
OR outlet_card_id IS NULL
OR order_number IS NULL
OR product_quantity IS NULL
OR weight_kg IS NULL 
OR price IS NULL
OR vat IS NULL
OR amount IS NULL
OR begin_minute IS NULL
OR end_minute IS NULL
OR minutes_spent IS NULL
OR insert_dt IS NULL
OR update_dt IS NULL;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">nulls_ce_outlet_orders</stringProp>
          <stringProp name="resultVariable">nulls_ce_outlet_orders</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">nulls_ce_outlet_orders_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check full duplicates in layer_3nf.ce_customers" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT customer_surr_id,
customer_src_id,
distributor_surr_id,
city_surr_id,
customer_name,
customer_name_en,
src_table,
insert_dt, update_dt, count(*)
FROM layer_3nf.ce_customers
GROUP BY customer_surr_id,
customer_src_id,
distributor_surr_id,
city_surr_id,
customer_name,
customer_name_en,
src_table,
insert_dt, update_dt
HAVING count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dup_ce_customers_full</stringProp>
          <stringProp name="resultVariable">dup_ce_customers_full</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dup_ce_customers_full_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сompare count of rows in layer_3nf.ce_customers" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT src.n as rows_lnd_customers, trg.n as rows_3nf_customers, (src.n+1-trg.n) as difference
FROM 
(SELECT count(DISTINCT cust_id) AS n
FROM    (SELECT DISTINCT dw.cust_id,
dw.cust_name,
dw.cust_name as cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_warehouses dw
LEFT JOIN layer_3nf.ce_distributors cd
ON dw.distr_id =cd.distributor_src_id
AND dw.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dw.city_id
AND cc.city_name = dw.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_outlets do2
LEFT JOIN layer_3nf.ce_distributors cd
ON do2.distr_id =cd.distributor_src_id
AND do2.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = do2.city_id
AND cc.city_name = do2.city_name
UNION
SELECT DISTINCT cust_id,
cust_name,
cust_name_en,
cd.distributor_surr_id,
cc.city_surr_id
FROM lnd_layer.dim_merchandisers dm
LEFT JOIN layer_3nf.ce_distributors cd
ON dm.distr_id =cd.distributor_src_id
AND dm.distr_name = cd.distributor_name
LEFT JOIN layer_3nf.ce_cities cc
ON cc.city_src_id = dm.city_id
AND cc.city_name = dm.city_name
          )r
WHERE cust_name NOT LIKE &apos;Unknown%&apos;) src,         
        (SELECT count(DISTINCT customer_src_id) AS n
        FROM layer_3nf.ce_customers) trg;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count_ce_customers</stringProp>
          <stringProp name="resultVariable">count_ce_customers</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count_ce_customers</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Check full duplicates in layer_3nf.ce_distibutors" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT 
distributor_surr_id,
distributor_src_id,
distributor_name,
distributor_name_en,
src_table,
insert_dt, update_dt, count(*)
FROM layer_3nf.ce_distributors
GROUP BY distributor_surr_id,
distributor_src_id,
distributor_name,
distributor_name_en,
src_table,
insert_dt, update_dt
HAVING count(*)&gt;1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dup_ce_distributors_full</stringProp>
          <stringProp name="resultVariable">dup_ce_distributors_full</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">dup_ce_distributors_full_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Compare count of rows in layer_3nf.ce_distributors" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT src.n as rows_lnd_distibutors, trg.n as rows_3nf_distributors, (src.n+1-trg.n) as difference
FROM 
(SELECT count(DISTINCT distr_id) AS n
FROM    (SELECT distr_id, distr_name, distr_name_en
        FROM lnd_layer.dim_merchandisers dm 
        UNION ALL 
        SELECT distr_id, distr_name, distr_name_en
        FROM lnd_layer.dim_outlets do2 
        UNION ALL
        SELECT distr_id, distr_name, distr_name AS distr_name_en
        FROM lnd_layer.dim_warehouses dw 
        ) a
        WHERE distr_name NOT LIKE &apos;Unknown%&apos;) src,         
        (SELECT count(*) AS n
        FROM layer_3nf.ce_distributors) trg;
       </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">count_ce_distributors</stringProp>
          <stringProp name="resultVariable">count_ce_distributors</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1196662384">difference=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">count_ce_distributors</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Сheck layer_3nf.ce_outlet_order for negative values" enabled="true">
          <stringProp name="dataSource">postgres_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT *
FROM layer_3nf.ce_outlet_orders 
WHERE order_number&lt; 0
OR product_quantity&lt; 0
OR weight_kg&lt;0
OR price&lt;0
OR vat&lt; 0
OR amount&lt; 0
OR begin_minute&lt;0
OR end_minute&lt;0
OR minutes_spent&lt; 0;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">negative_values_ce_outlet_orders</stringProp>
          <stringProp name="resultVariable">negative_values_ce_outlet_orders</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="48">0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">negative_values_ce_outlet_orders_#</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
